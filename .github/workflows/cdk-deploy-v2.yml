name: CDK Deploy v2

on:
  push:
    branches: [main, qa, uat, dev]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - deploy
          - destroy
      environment:
        description: 'Environment to target'
        required: true
        type: choice
        options:
          - prod
          - uat
          - qa
          - dev

permissions:
  id-token: write
  contents: read

jobs:
  check_skip:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - name: Check for skip deployment indicator
        id: skip_check
        run: |
          # Check if commit message contains [skip deploy] or [no deploy]
          if [[ "${{ github.event.head_commit.message }}" == *"[skip deploy]"* ]] || 
             [[ "${{ github.event.head_commit.message }}" == *"[no deploy]"* ]]; then
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "Deployment will be skipped due to [skip deploy] or [no deploy] in commit message"
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
            echo "No skip indicator found in commit message, proceeding with deployment"
          fi

  deploy:
    needs: check_skip
    if: |
      (needs.check_skip.outputs.should_skip != 'true' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    runs-on: ubuntu-latest
    environment: >-
      ${{ 
        github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
        github.ref == 'refs/heads/main' && 'prod' || 
        github.ref == 'refs/heads/uat' && 'uat' || 
        github.ref == 'refs/heads/qa' && 'qa' || 
        'dev' 
      }}
    permissions:
      id-token: write
      contents: read
    env:
      QUALIFIER: >-
        ${{ 
          github.event_name == 'workflow_dispatch' && format('ff{0}', github.event.inputs.environment) ||
          github.ref == 'refs/heads/main' && 'ffprod' || 
          github.ref == 'refs/heads/uat' && 'ffuat' || 
          github.ref == 'refs/heads/qa' && 'ffqa' || 
          'ffdev'
        }}
      AWS_REGION: us-east-1
      CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
      CDK_DEFAULT_REGION: us-east-1
      CDK_ENV: >-
        ${{ 
          github.event_name == 'workflow_dispatch' && github.event.inputs.environment ||
          github.ref == 'refs/heads/main' && 'prod' || 
          github.ref == 'refs/heads/uat' && 'uat' || 
          github.ref == 'refs/heads/qa' && 'qa' || 
          'dev' 
        }}
      STACK_VERSION: >-
        ${{ 
          github.ref == 'refs/tags/*' && github.ref_name || 
          format('{0}-{1}', github.run_number, github.sha)
        }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-devops-${{ env.CDK_ENV }}
          aws-region: us-east-1
          role-duration-seconds: 3600

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install CDK CLI
        run: |
          npm install -g aws-cdk@latest
  
      - name: Verify CDK Version
        run: |
          cdk --version 

      - name: Install Dependencies
        run: |
          cd infra
          npm ci

      - name: Check for ongoing stack operations
        run: |
          STACK_NAME="FineFinds-${{ env.CDK_ENV }}"
          echo "Checking status of $STACK_NAME stack..."
          
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "STACK_NOT_FOUND")
          
          echo "Current stack status: $STACK_STATUS"
          
          if [[ $STACK_STATUS == *"_IN_PROGRESS" ]]; then
            echo "Stack operation is already in progress. Waiting for it to complete..."
            
            aws cloudformation wait stack-$([[ $STACK_STATUS == "CREATE_IN_PROGRESS" ]] && echo "create-complete" || echo "update-complete") --stack-name $STACK_NAME --timeout-in-minutes 30 || {
              echo "::error::Stack operation timed out after 30 minutes. Please check the CloudFormation console."
              exit 1
            }
            
            echo "Stack operation completed. Proceeding with deployment."
          elif [[ $STACK_STATUS == "STACK_NOT_FOUND" ]]; then
            echo "Stack does not exist yet. This might be a new environment."
            echo "IS_NEW_ENVIRONMENT=true" >> $GITHUB_ENV
          else
            echo "Stack is not in an IN_PROGRESS state. Proceeding with deployment."
            echo "IS_NEW_ENVIRONMENT=false" >> $GITHUB_ENV
          fi

      - name: Clean CDK Context and Cache
        run: |
          cd infra
          echo "Cleaning .cdk.context.json and cached context..."
          rm -f .cdk.context.json || true
          npx cdk context --clear
  
      - name: CDK Bootstrap (Initial Setup)
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
        run: |
          cd infra
          echo "Bootstrapping CDK for environment: ${{ env.CDK_ENV }}, qualifier: ${{ env.QUALIFIER }}"
          export CDK_QUALIFIER=${{ env.QUALIFIER }}
          
          npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.CDK_DEFAULT_REGION }} \
            --qualifier ${{ env.QUALIFIER }} \
            --context qualifier=${{ env.QUALIFIER }} \
            --context environment=${{ env.CDK_ENV }} \
            --context version=${{ env.STACK_VERSION }} \
            --context aws-cdk:qualifier=${{ env.QUALIFIER }} \
            --context aws-cdk:lookup-role-name=cdk-${{ env.QUALIFIER }}-lookup-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:deploy-role-name=cdk-${{ env.QUALIFIER }}-deploy-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:file-asset-role-name=cdk-${{ env.QUALIFIER }}-file-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:image-asset-role-name=cdk-${{ env.QUALIFIER }}-image-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:image-asset-publishing-role-name=cdk-${{ env.QUALIFIER }}-image-publishing-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:asset-publishing-role-name=cdk-${{ env.QUALIFIER }}-publishing-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --require-approval never
      
      - name: Bootstrap Secrets
        if: (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')) && env.IS_NEW_ENVIRONMENT == 'true'
        run: |
          cd infra
          echo "Bootstrapping secrets for new environment: ${{ env.CDK_ENV }}, qualifier: ${{ env.QUALIFIER }}"
          npx cdk --app 'npx ts-node --prefer-ts-exts bin/bootstrap-secrets.ts' deploy \
            --qualifier ${{ env.QUALIFIER }} \
            --context qualifier=${{ env.QUALIFIER }} \
            --context environment=${{ env.CDK_ENV }} \
            --context version=${{ env.STACK_VERSION }} \
            --context aws-cdk:qualifier=${{ env.QUALIFIER }} \
            --context aws-cdk:lookup-role-name=cdk-${{ env.QUALIFIER }}-lookup-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:deploy-role-name=cdk-${{ env.QUALIFIER }}-deploy-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:file-asset-role-name=cdk-${{ env.QUALIFIER }}-file-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:image-asset-role-name=cdk-${{ env.QUALIFIER }}-image-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:image-asset-publishing-role-name=cdk-${{ env.QUALIFIER }}-image-publishing-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:asset-publishing-role-name=cdk-${{ env.QUALIFIER }}-publishing-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --require-approval never

      - name: Deploy Infrastructure
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
        run: |
          cd infra
          echo "Deploying infrastructure for environment: ${{ env.CDK_ENV }}, qualifier: ${{ env.QUALIFIER }}"
          npx cdk deploy --all \
            --qualifier ${{ env.QUALIFIER }} \
            --context qualifier=${{ env.QUALIFIER }} \
            --context environment=${{ env.CDK_ENV }} \
            --context version=${{ env.STACK_VERSION }} \
            --context aws-cdk:qualifier=${{ env.QUALIFIER }} \
            --context aws-cdk:lookup-role-name=cdk-${{ env.QUALIFIER }}-lookup-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:deploy-role-name=cdk-${{ env.QUALIFIER }}-deploy-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:file-asset-role-name=cdk-${{ env.QUALIFIER }}-file-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:image-asset-role-name=cdk-${{ env.QUALIFIER }}-image-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:image-asset-publishing-role-name=cdk-${{ env.QUALIFIER }}-image-publishing-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:asset-publishing-role-name=cdk-${{ env.QUALIFIER }}-publishing-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --require-approval never

  destroy:
    needs: check_skip
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      QUALIFIER: >-
        ${{ 
          github.event_name == 'workflow_dispatch' && format('ff{0}', github.event.inputs.environment) ||
          github.ref == 'refs/heads/main' && 'ffprod' || 
          github.ref == 'refs/heads/uat' && 'ffuat' || 
          github.ref == 'refs/heads/qa' && 'ffqa' || 
          'ffdev'
        }}
      AWS_REGION: us-east-1
      CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
      CDK_DEFAULT_REGION: us-east-1
      CDK_ENV: ${{ github.event.inputs.environment }}
      STACK_VERSION: >-
        ${{ 
          github.ref == 'refs/tags/*' && github.ref_name || 
          format('{0}-{1}', github.run_number, github.sha)
        }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-devops-${{ env.CDK_ENV }}
          aws-region: us-east-1
          role-duration-seconds: 3600

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install CDK CLI
        run: |
          npm install -g aws-cdk@latest
  
      - name: Verify CDK Version
        run: |
          cdk --version 

      - name: Install Dependencies
        run: |
          cd infra
          npm ci

      - name: Clean CDK Context and Cache
        run: |
          cd infra
          echo "Cleaning .cdk.context.json and cached context..."
          rm -f .cdk.context.json || true
          npx cdk context --clear

      - name: Destroy Infrastructure
        run: |
          cd infra
          echo "Destroying infrastructure for environment: ${{ env.CDK_ENV }}, qualifier: ${{ env.QUALIFIER }}"
          npx cdk destroy --all \
            --qualifier ${{ env.QUALIFIER }} \
            --context qualifier=${{ env.QUALIFIER }} \
            --context environment=${{ env.CDK_ENV }} \
            --context version=${{ env.STACK_VERSION }} \
            --context aws-cdk:qualifier=${{ env.QUALIFIER }} \
            --context aws-cdk:lookup-role-name=cdk-${{ env.QUALIFIER }}-lookup-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:deploy-role-name=cdk-${{ env.QUALIFIER }}-deploy-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:file-asset-role-name=cdk-${{ env.QUALIFIER }}-file-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:image-asset-role-name=cdk-${{ env.QUALIFIER }}-image-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:image-asset-publishing-role-name=cdk-${{ env.QUALIFIER }}-image-publishing-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --context aws-cdk:asset-publishing-role-name=cdk-${{ env.QUALIFIER }}-publishing-role-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.CDK_DEFAULT_REGION }} \
            --require-approval never 