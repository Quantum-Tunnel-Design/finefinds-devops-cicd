name: 'Terraform'

on:
  push:
    branches: [ main, dev, qa, staging, sandbox ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for better logging

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.7"  # Specify version for consistency

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-${{ github.ref_name }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify OIDC Configuration
      run: |
        echo "=== Verifying OIDC Configuration ==="
        
        # Get the current environment
        ENV_NAME="${{ github.ref_name }}"
        if [ "$ENV_NAME" = "main" ]; then
          ENV_NAME="prod"
        fi
        
        # Function to create/update OIDC provider
        create_oidc_provider() {
          echo "Creating OIDC provider..."
          aws iam create-open-id-connect-provider \
            --url "https://token.actions.githubusercontent.com" \
            --client-id-list "sts.amazonaws.com" \
            --thumbprint-list "6938fd4d98bab03faadb97b34396831e3780aea1"
          
          if [ $? -eq 0 ]; then
            echo "✅ OIDC provider created successfully"
            return 0
          else
            echo "❌ Failed to create OIDC provider"
            return 1
          fi
        }
        
        # Function to create/update IAM role
        create_iam_role() {
          local role_name="github-actions-${ENV_NAME}"
          echo "Creating IAM role: $role_name"
          
          # Create trust policy
          cat > trust-policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Federated": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/token.actions.githubusercontent.com"
            },
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Condition": {
                "StringLike": {
                    "token.actions.githubusercontent.com:sub": "repo:${{ github.repository }}:environment:${ENV_NAME}"
                }
            }
        }
    ]
}
EOF
          
          # Create or update role
          if ! aws iam get-role --role-name "$role_name" &> /dev/null; then
            aws iam create-role \
              --role-name "$role_name" \
              --assume-role-policy-document file://trust-policy.json
            
            if [ $? -eq 0 ]; then
              echo "✅ Role created successfully"
            else
              echo "❌ Failed to create role"
              rm trust-policy.json
              return 1
            fi
          else
            aws iam update-assume-role-policy \
              --role-name "$role_name" \
              --policy-document file://trust-policy.json
            
            if [ $? -eq 0 ]; then
              echo "✅ Role trust policy updated successfully"
            else
              echo "❌ Failed to update role trust policy"
              rm trust-policy.json
              return 1
            fi
          fi
          
          # Attach AdministratorAccess policy
          echo "Attaching AdministratorAccess policy..."
          aws iam attach-role-policy \
            --role-name "$role_name" \
            --policy-arn "arn:aws:iam::aws:policy/AdministratorAccess"
          
          if [ $? -eq 0 ]; then
            echo "✅ Policy attached successfully"
          else
            echo "❌ Failed to attach policy"
            rm trust-policy.json
            return 1
          fi
          
          rm trust-policy.json
          return 0
        }
        
        # Check if OIDC provider exists
        echo "Checking OIDC provider..."
        if ! aws iam get-open-id-connect-provider --open-id-connect-provider-arn "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/token.actions.githubusercontent.com" &> /dev/null; then
          echo "❌ OIDC provider not found"
          echo "Attempting to create OIDC provider..."
          if ! create_oidc_provider; then
            exit 1
          fi
        else
          echo "✅ OIDC provider exists"
        fi
        
        # Check if IAM role exists
        echo "Checking IAM role..."
        if ! aws iam get-role --role-name "github-actions-${ENV_NAME}" &> /dev/null; then
          echo "❌ IAM role 'github-actions-${ENV_NAME}' not found"
          echo "Attempting to create IAM role..."
          if ! create_iam_role; then
            exit 1
          fi
        else
          echo "✅ IAM role exists"
          
          # Verify trust policy
          echo "Verifying trust policy..."
          TRUST_POLICY=$(aws iam get-role --role-name "github-actions-${ENV_NAME}" --query 'Role.AssumeRolePolicyDocument' --output json)
          
          # Check if the trust policy needs updating
          NEEDS_UPDATE=false
          
          if ! echo "$TRUST_POLICY" | grep -q "token.actions.githubusercontent.com"; then
            echo "⚠️ Trust policy has incorrect OIDC provider"
            NEEDS_UPDATE=true
          fi
          
          if ! echo "$TRUST_POLICY" | grep -q "repo:${{ github.repository }}:environment:${ENV_NAME}"; then
            echo "⚠️ Trust policy has incorrect repository or environment"
            NEEDS_UPDATE=true
          fi
          
          if [ "$NEEDS_UPDATE" = true ]; then
            echo "Attempting to update trust policy..."
            if ! create_iam_role; then
              exit 1
            fi
          else
            echo "✅ Trust policy is correctly configured"
          fi
        fi
        
        echo "=== OIDC Configuration Verification Complete ==="

    - name: Show Environment Info
      run: |
        echo "=== Environment Information ==="
        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: ${{ github.ref_name }}"
        echo "AWS Region: ${{ secrets.AWS_REGION }}"
        echo "AWS Account ID: ${{ secrets.AWS_ACCOUNT_ID }}"
        echo "============================="

    - name: Terraform Init
      id: init
      run: |
        echo "=== Initializing Terraform ==="
        cd terraform/environments/${{ github.ref_name }}
        echo "Working directory: $(pwd)"
        echo "Terraform version: $(terraform version)"
        terraform init
        echo "Terraform initialization completed"
        echo "================================"

    - name: Terraform Plan
      id: plan
      run: |
        echo "=== Creating Terraform Plan ==="
        cd terraform/environments/${{ github.ref_name }}
        echo "Working directory: $(pwd)"
        terraform plan -detailed-exitcode
        echo "Terraform plan completed"
        echo "========================="

    - name: Terraform Apply
      id: apply
      run: |
        echo "=== Applying Terraform Changes ==="
        cd terraform/environments/${{ github.ref_name }}
        echo "Working directory: $(pwd)"
        terraform apply -auto-approve
        echo "Terraform apply completed"
        echo "============================="

    - name: Get SonarQube URL
      id: sonarqube
      run: |
        echo "=== Getting SonarQube URL ==="
        cd terraform/environments/${{ github.ref_name }}
        echo "Working directory: $(pwd)"
        SONARQUBE_URL=$(terraform output -raw sonarqube_url)
        echo "SonarQube URL: $SONARQUBE_URL"
        echo "url=$SONARQUBE_URL" >> $GITHUB_OUTPUT
        echo "============================"

    - name: Setup SonarQube
      if: github.ref_name == 'main'
      id: sonarqube_setup
      run: |
        echo "=== Setting up SonarQube ==="
        SONARQUBE_URL="${{ steps.sonarqube.outputs.url }}"
        echo "SonarQube URL: $SONARQUBE_URL"
        
        # Wait for SonarQube to be ready
        echo "Waiting for SonarQube to be ready..."
        for i in {1..30}; do
          if curl -s "$SONARQUBE_URL" > /dev/null; then
            echo "✅ SonarQube is ready!"
            break
          fi
          echo "⏳ Waiting... ($i/30)"
          sleep 10
        done

        # Generate SonarQube token
        echo "Generating SonarQube token..."
        TOKEN=$(curl -s -X POST \
          -u "admin:admin" \
          -d "name=github-actions" \
          "$SONARQUBE_URL/api/user_tokens/generate" | jq -r '.token')
        
        if [ -z "$TOKEN" ]; then
          echo "❌ Failed to generate SonarQube token"
          exit 1
        fi
        echo "✅ SonarQube token generated successfully"

        # Set GitHub secrets
        echo "Setting GitHub secrets..."
        gh secret set SONAR_TOKEN -b"$TOKEN" -e"${{ github.ref_name }}"
        gh secret set SONAR_HOST_URL -b"$SONARQUBE_URL" -e"${{ github.ref_name }}"
        echo "✅ GitHub secrets set successfully"

        echo "=== SonarQube setup completed! ==="

    - name: Generate Summary Report
      if: always()
      run: |
        echo "=== Deployment Summary Report ==="
        echo "📅 Date: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "🏗️ Environment: ${{ github.ref_name }}"
        echo "🔑 AWS Region: ${{ secrets.AWS_REGION }}"
        echo ""
        echo "📋 Steps Status:"
        echo "✅ Terraform Init: ${{ steps.init.outcome == 'success' && 'Success' || 'Failed' }}"
        echo "✅ Terraform Plan: ${{ steps.plan.outcome == 'success' && 'Success' || 'Failed' }}"
        echo "✅ Terraform Apply: ${{ steps.apply.outcome == 'success' && 'Success' || 'Failed' }}"
        if [ "${{ github.ref_name }}" == "main" ]; then
          echo "✅ SonarQube Setup: ${{ steps.sonarqube_setup.outcome == 'success' && 'Success' || 'Failed' }}"
        fi
        echo ""
        echo "🔍 Resources:"
        echo "🔗 SonarQube URL: ${{ steps.sonarqube.outputs.url || 'N/A' }}"
        echo ""
        echo "📝 Notes:"
        echo "- Deployment completed for ${{ github.ref_name }} environment"
        if [ "${{ github.ref_name }}" == "main" ]; then
          echo "- SonarQube has been configured and secrets have been set"
        fi
        echo "================================" 