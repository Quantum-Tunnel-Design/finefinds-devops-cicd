name: 'Terraform'

on:
  push:
    branches: [ main, dev, qa, staging, sandbox ]
  pull_request:
    branches: [ main, dev, qa, staging, sandbox ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.body, 'sonar-deploy'))

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for better logging
    
    - name: Cache Terraform plugins
      uses: actions/cache@v3
      with:
        path: |
          terraform/environments/${{ github.ref_name }}/.terraform
          terraform/environments/${{ github.ref_name }}/.terraform.lock.hcl
        key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
        restore-keys: terraform-${{ runner.os }}-
    
    - name: Set environment name
      id: setenv
      run: |
        if [[ "${GITHUB_REF##*/}" == "main" ]]; then
          echo "env=prod" >> $GITHUB_OUTPUT
        elif [[ "${GITHUB_REF##*/}" == "staging" ]]; then
          echo "env=staging" >> $GITHUB_OUTPUT
        elif [[ "${GITHUB_REF##*/}" == "qa" ]]; then
          echo "env=qa" >> $GITHUB_OUTPUT
        elif [[ "${GITHUB_REF##*/}" == "sandbox" ]]; then
          echo "env=sandbox" >> $GITHUB_OUTPUT
        else
          echo "env=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Backend
      run: bash scripts/setup-infrastructure.sh ${{ github.ref_name }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.7"  # Specify version for consistency

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-${{ github.ref_name }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify OIDC Configuration
      run: |
        # Set environment variables
        export ENV_NAME="${{ github.ref_name == 'main' && 'prod' || github.ref_name }}"
        export ENVIRONMENT="${{ github.ref_name == 'main' && 'prod' || github.ref_name }}"
        export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
        export REPO_NAMESITORY="${{ github.repository }}"
        
        # Make script executable and run it
        chmod +x scripts/verify-oidc.sh
        ./scripts/verify-oidc.sh

    - name: Show Environment Info
      run: |
        echo "=== Environment Information ==="
        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: ${{ github.ref_name }}"
        echo "AWS Region: ${{ secrets.AWS_REGION }}"
        echo "AWS Account ID: ${{ secrets.AWS_ACCOUNT_ID }}"
        echo "============================="

    - name: Terraform Init
      id: init
      run: |
        echo "=== Initializing Terraform ==="
        cd terraform/environments/${{ github.ref_name }}
        echo "Working directory: $(pwd)"
        echo "Terraform version: $(terraform version)"
        terraform init
        ls -la
        echo "Terraform initialization completed"
        echo "================================"

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        echo "=== Creating Terraform Plan ==="
        cd terraform/environments/${{ github.ref_name }}
        echo "Working directory: $(pwd)"
        terraform plan \
          -var="source_token=${{ secrets.SOURCE_TOKEN }}" \
          -var="client_repository=${{ secrets.CLIENT_REPOSITORY }}" \
          -var="admin_repository=${{ secrets.ADMIN_REPOSITORY }}" \
          -var="alert_email=${{ secrets.ALERT_EMAIL }}" \
          -out=tfplan -detailed-exitcode
        echo "Terraform plan completed"
        echo "========================="

    - name: Terraform Apply
      id: apply
      run: |
        echo "=== Applying Terraform Changes ==="
        cd terraform/environments/${{ github.ref_name }}
        echo "Working directory: $(pwd)"
        terraform apply \
          -var="source_token=${{ secrets.SOURCE_TOKEN }}" \
          -var="client_repository=${{ secrets.CLIENT_REPOSITORY }}" \
          -var="admin_repository=${{ secrets.ADMIN_REPOSITORY }}" \
          -var="alert_email=${{ secrets.ALERT_EMAIL }}" \
          -auto-approve
        echo "Terraform apply completed"
        echo "============================="

    - name: Set Environment Emoji
      id: emoji
      run: |
        if [[ "${{ steps.setenv.outputs.env }}" == "prod" ]]; then
          echo "emoji=🚀" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.setenv.outputs.env }}" == "staging" ]]; then
          echo "emoji=🔄" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.setenv.outputs.env }}" == "qa" ]]; then
          echo "emoji=🔍" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.setenv.outputs.env }}" == "sandbox" ]]; then
          echo "emoji=🏖️" >> $GITHUB_OUTPUT
        else
          echo "emoji=🛠️" >> $GITHUB_OUTPUT
        fi

    - name: Generate Summary Report
      if: always()
      run: |
        echo "=== Deployment Summary Report ==="
        echo "📅 Date: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "🏗️ Environment: ${{ github.ref_name }}"
        echo "🔑 AWS Region: ${{ secrets.AWS_REGION }}"
        echo ""
        echo "📋 Steps Status:"
        echo "✅ Terraform Init: ${{ steps.init.outcome == 'success' && 'Success' || 'Failed' }}"
        echo "✅ Terraform Plan: ${{ steps.plan.outcome == 'success' && 'Success' || 'Failed' }}"
        echo "✅ Terraform Apply: ${{ steps.apply.outcome == 'success' && 'Success' || 'Failed' }}"
        echo ""
        echo "- Deployment completed for ${{ github.ref_name }} environment"
        echo "================================"

    - name: Update Trust Policy
      run: |
        # Set environment variables
        export ENV_NAME="${{ github.ref_name == 'main' && 'prod' || github.ref_name }}"
        export AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
        export REPO_NAMESITORY="${{ github.repository }}"
        
        # Create trust policy JSON
        cat > trust-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/token.actions.githubusercontent.com"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringLike": {
                            "token.actions.githubusercontent.com:sub": "repo:${REPO_NAMESITORY}:environment:${ENV_NAME}"
                        }
                    }
                }
            ]
        }
        EOF
        
        # Update the trust policy
        aws iam update-assume-role-policy --role-name "github-actions-${ENV_NAME}" --policy-document file://trust-policy.json
        
        # Clean up
        rm trust-policy.json
    
    - name: Slack Notification (Success)
      if: success() && github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev' || github.ref_name == 'qa' || github.ref_name == 'sandbox' || github.ref_name == 'staging')
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_DEVOPS }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_DEVOPS }}
        SLACK_COLOR: good
        SLACK_TITLE: '${{ steps.emoji.outputs.emoji }} Terraform Deploy Succeeded'
        SLACK_MESSAGE: |
          *Environment:* ${{ steps.setenv.outputs.env }}
          *Branch:* `${{ github.ref_name }}`
          *Triggered by:* ${{ github.actor }}
          *Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
          *Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>
          *Changes:* <${{ github.server_url }}/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}|View Changes>
        SLACK_USERNAME: 'GitHub Actions'
        SLACK_ICON_EMOJI: ':white_check_mark:'
  
    - name: Slack Notification (Failure)
      if: failure() && github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev' || github.ref_name == 'qa' || github.ref_name == 'sandbox' || github.ref_name == 'staging')
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_DEVOPS }}
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_DEVOPS }}
        SLACK_COLOR: danger
        SLACK_TITLE: '${{ steps.emoji.outputs.emoji }} Terraform Deploy Failed'
        SLACK_MESSAGE: |
          *Environment:* ${{ steps.setenv.outputs.env }}
          *Branch:* `${{ github.ref_name }}`
          *Triggered by:* ${{ github.actor }}
          *Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
          *Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>
          *Changes:* <${{ github.server_url }}/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}|View Changes>
        SLACK_USERNAME: 'GitHub Actions'
        SLACK_ICON_EMOJI: ':x:'
